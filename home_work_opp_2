class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecturer(self, lecturer, course, grade):
        if isinstance(lecturer,
                      Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return (f'Имя: {self.name} \nФамилия: {self.surname}\nСредняя оценка за домашнее задание: {self.grades}\n'
                f'Курсы в процессе обучения: {self.courses_in_progress}\nЗавершенные курсы:{"".join(self.finished_courses)}\n')

    def middle_grades(self):
        grades_list = sum(self.grades.values(), start=[])
        return round(sum(grades_list) / len(grades_list), 2)

    def __lt__(self, other):
        if not isinstance(other, Student):
            print('Ошибка')
            return
        return self.middle_grades() < other.middle_grades()


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

    def __str__(self):
        return (f"Имя: {self.name}\nФамилия: {self.surname}")


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
        self.lec = []

    def middle_grades_lec(self):
        grades_list = sum(self.grades.values(), start=[])
        return round(sum(grades_list) / len(grades_list), 2)

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            print('Ошибка')
            return
        return self.middle_grades_lec() < other.middle_grades_lec()

    def __str__(self):
        return (f"Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за лекции:{self.grades}")


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

def total(student_list, course):

    all_grades = []
    for student in student_list:
        for key, value in student.grades.items():
            if key == course:
                all_grades.extend(value)
    return sum(all_grades) / len(all_grades)

def total(lecturer_list, course):

    all_grades = []
    for lector in lecturer_list:
        for key, value in lector.grades.items():
            if key == course:
                all_grades.extend(value)
    return sum(all_grades) / len(all_grades)

lecturer_list = []
lecturer_list.append(Lecturer('Bob', 'Marley'))
lecturer_list.append(Lecturer('Bill', 'Bronson'))

lecturer_list[0].lec += ['Python', 'Git']
lecturer_list[1].lec += ['Python', 'Git']

mentors_list = []
mentors_list.append(Reviewer('Tom', 'Taylor'))
mentors_list.append(Reviewer('Adam', 'Mentos'))  # [1]

mentors_list[0].courses_attached += ['Python', 'Git']
mentors_list[1].courses_attached += ['Python', 'Git']

student_list = []
student_list.append(Student('Bill', 'Clinton', 'male'))
student_list.append(Student('Tanya', 'Volkova', 'female'))

student_list[0].courses_in_progress += ['Python']
student_list[0].finished_courses += ['Git']
student_list[1].courses_in_progress += ['Git']
student_list[1].finished_courses += ['Python']

mentors_list[0].rate_hw(student_list[0], 'Python', 10)
mentors_list[1].rate_hw(student_list[0], 'Python', 8)
mentors_list[0].rate_hw(student_list[0], 'Python', 8)
mentors_list[0].rate_hw(student_list[0], 'Python', 10)
mentors_list[0].rate_hw(student_list[1], 'Python', 8)
mentors_list[1].rate_hw(student_list[1], 'Python', 7)
mentors_list[0].rate_hw(student_list[1], 'Python', 5)

student_list[0].rate_lecturer(lecturer_list[0], 'Python', 2)
student_list[0].rate_lecturer(lecturer_list[0], 'Python', 5)
student_list[0].rate_lecturer(lecturer_list[1], 'Python', 6)
student_list[0].rate_lecturer(lecturer_list[1], 'Python', 10)
student_list[1].rate_lecturer(lecturer_list[0], 'Git', 9)
student_list[1].rate_lecturer(lecturer_list[0], 'Git', 9)
student_list[1].rate_lecturer(lecturer_list[1], 'Git', 10)

print(student_list[0].grades)
print(student_list[1].grades)
print(student_list[1])
print(mentors_list[0])
print(mentors_list[1])

